name: Deploy Server to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies and run tests
      run: |
        npm ci
        npm test || echo "No tests found, skipping..."
        
    - name: Build Docker image
      run: |
        docker build -t cinemahint:latest .
        
    - name: Debug SSH Connection
      run: |
        echo "Testing SSH connection to ${{ secrets.EC2_HOST }}"
        echo "Using username: ${{ secrets.EC2_USERNAME }}"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT || 22 }}
        debug: true
        script: |
          set -e  # Exit on any error
          
          echo "üè† Current directory: $(pwd)"
          echo "üë§ Current user: $(whoami)"
          
          # Check if deployment directory exists
          echo "üîç Checking deployment directory..."
          if [ ! -d "/home/${{ secrets.EC2_USERNAME }}/cinema-hint-server" ]; then
            echo "‚ùå Directory /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server does not exist!"
            echo "üìÅ Available directories in /home/${{ secrets.EC2_USERNAME }}:"
            ls -la /home/${{ secrets.EC2_USERNAME }}/
            exit 1
          fi
          
          # Navigate to deployment directory
          echo "üìÇ Navigating to deployment directory..."
          cd /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server
          
          echo "üìç Now in: $(pwd)"
          echo "üìã Directory contents:"
          ls -la
          
          # Check if it's a git repository
          if [ ! -d ".git" ]; then
            echo "‚ùå This is not a git repository!"
            exit 1
          fi
          
          echo "üîó Git remote configuration:"
          git remote -v
          
          echo "üîÑ Current git status:"
          git status
          
          # Check if there are local changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "‚ö†Ô∏è Local changes detected, stashing them..."
            git stash push -m "Auto-stash before deployment $(date)"
          fi
          
          # Add untracked files that might interfere
          echo "üì¶ Adding untracked files to .gitignore if needed..."
          echo "backups/" >> .gitignore
          echo "nginx/ssl/" >> .gitignore
          echo "*.log" >> .gitignore
          
          echo "üì• Pulling latest code..."
          git pull origin main || {
            echo "‚ùå Git pull failed!"
            echo "üîç Git status after failed pull:"
            git status
            echo "üîç Git log to see what's happening:"
            git log --oneline -5
            exit 1
          }
          
          echo "‚úÖ Latest commits after pull:"
          git log --oneline -3
          
          # Create backup of current deployment
          timestamp=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups
          docker-compose logs > backups/app_logs_$timestamp.log
          
          # Stop current services
          docker-compose down
          
          # Build new image
          docker build -t cinemahint:latest .
          
          # Clean up old images and containers
          docker image prune -f
          docker container prune -f
          
          # Start services with production profile
          docker-compose --profile production up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30
          
          # Health check
          if curl -f http://localhost:5000/api/health; then
            echo "‚úÖ Deployment successful! Application is healthy."
          else
            echo "‚ùå Health check failed. Check logs:"
            docker-compose logs --tail=50
            exit 1
          fi
          
          # Show status
          docker-compose ps
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT || 22 }}
        script: |
          # Additional health checks
          echo "üîç Running deployment verification..."
          
          # Check if all services are running
          cd /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server
          
          if docker-compose ps | grep -q "Up.*healthy"; then
            echo "‚úÖ All services are healthy"
          else
            echo "‚ö†Ô∏è Some services may not be healthy:"
            docker-compose ps
          fi
          
          # Test API endpoints
          echo "üß™ Testing API endpoints..."
          
          # Health endpoint
          if curl -f https://cinemahint.adilhusain.me/api/health; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
          fi
          
          # Check Redis connection
          if docker exec cinemahint-redis redis-cli ping | grep -q "PONG"; then
            echo "‚úÖ Redis is responding"
          else
            echo "‚ùå Redis connection failed"
          fi
          
          echo "üéâ Deployment verification completed!"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment to https://cinemahint.adilhusain.me was successful!"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
          exit 1
        fi