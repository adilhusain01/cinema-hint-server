name: Deploy Server to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies and run tests
      run: |
        npm ci
        npm test || echo "No tests found, skipping..."
        
    - name: Build Docker image
      run: |
        docker build -t cinemahint:latest .
        
    - name: Debug SSH Connection
      run: |
        echo "Testing SSH connection to ${{ secrets.EC2_HOST }}"
        echo "Using username: ${{ secrets.EC2_USERNAME }}"
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT || 22 }}
        debug: true
        script: |
          set -e  # Exit on any error
          
          echo "üè† Current directory: $(pwd)"
          echo "üë§ Current user: $(whoami)"
          
          # Check if deployment directory exists
          echo "üîç Checking deployment directory..."
          if [ ! -d "/home/${{ secrets.EC2_USERNAME }}/cinema-hint-server" ]; then
            echo "‚ùå Directory /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server does not exist!"
            echo "üìÅ Available directories in /home/${{ secrets.EC2_USERNAME }}:"
            ls -la /home/${{ secrets.EC2_USERNAME }}/
            exit 1
          fi
          
          # Navigate to deployment directory
          echo "üìÇ Navigating to deployment directory..."
          cd /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server
          
          echo "üìç Now in: $(pwd)"
          echo "üìã Directory contents:"
          ls -la
          
          # Check if it's a git repository
          if [ ! -d ".git" ]; then
            echo "‚ùå This is not a git repository!"
            exit 1
          fi
          
          echo "üîó Git remote configuration:"
          git remote -v
          
          echo "üîÑ Current git status:"
          git status
          
          # Check if there are local changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "‚ö†Ô∏è Local changes detected, stashing them..."
            git stash push -m "Auto-stash before deployment $(date)"
          fi
          
          # Add untracked files that might interfere
          echo "üì¶ Adding untracked files to .gitignore if needed..."
          echo "backups/" >> .gitignore
          echo "nginx/ssl/" >> .gitignore
          echo "*.log" >> .gitignore
          
          # Remove any problematic config files that should be deleted
          echo "üßπ Cleaning up deleted config files..."
          rm -f nginx/conf.d/scale.conf nginx/conf.d/locations.conf
          
          echo "üì• Pulling latest code..."
          git pull origin main || {
            echo "‚ùå Git pull failed!"
            echo "üîç Git status after failed pull:"
            git status
            echo "üîç Git log to see what's happening:"
            git log --oneline -5
            exit 1
          }
          
          echo "‚úÖ Latest commits after pull:"
          git log --oneline -3
          
          # Create backup of current deployment
          timestamp=$(date +%Y%m%d_%H%M%S)
          mkdir -p backups
          docker-compose logs > backups/app_logs_$timestamp.log
          
          # Stop current services with force and remove volumes
          echo "üõë Stopping all services..."
          docker-compose down --remove-orphans
          
          # Force stop any remaining containers
          echo "üîÑ Force stopping any remaining containers..."
          docker stop $(docker ps -q --filter "name=cinemahint") 2>/dev/null || true
          docker rm $(docker ps -aq --filter "name=cinemahint") 2>/dev/null || true
          
          # Build new image
          echo "üèóÔ∏è Building new Docker image..."
          docker build -t cinemahint:latest . --no-cache
          
          # Clean up old images and containers
          echo "üßπ Cleaning up old Docker resources..."
          docker image prune -f
          docker container prune -f
          docker volume prune -f
          
          # Start services with production profile
          echo "üöÄ Starting services..."
          docker-compose --profile production up -d
          
          # Wait a bit for containers to start
          sleep 10
          
          # Restart nginx specifically to ensure it picks up any changes
          echo "üîÑ Restarting nginx container..."
          docker-compose restart nginx
          
          # Wait for services to be healthy
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # Clear Redis cache to ensure fresh state after deployment
          echo "üßπ Clearing Redis cache for fresh deployment state..."
          docker exec cinemahint-redis redis-cli FLUSHALL || echo "‚ö†Ô∏è Redis cache clear failed, continuing..."
          
          # Check individual service status
          echo "üìä Service status:"
          docker-compose ps
          
          # Check for failed containers
          FAILED_CONTAINERS=$(docker ps -a --filter "status=restarting" --filter "status=exited" --format "{{.Names}}")
          if [ ! -z "$FAILED_CONTAINERS" ]; then
            echo "‚ùå Failed containers detected: $FAILED_CONTAINERS"
            echo "üìã Logs for failed containers:"
            for container in $FAILED_CONTAINERS; do
              echo "--- Logs for $container ---"
              docker logs --tail=20 $container
            done
          fi
          
          # Health check (try both local and external)
          echo "üß™ Testing application health..."
          if curl -f http://localhost:5000/api/health; then
            echo "‚úÖ Internal health check passed!"
          else
            echo "‚ùå Internal health check failed!"
            echo "üìã App container logs:"
            docker logs --tail=20 cinemahint-app
          fi
          
          # Test external access (if nginx is working)
          if curl -f https://cinemahint.adilhusain.me/api/health 2>/dev/null; then
            echo "‚úÖ External HTTPS access working!"
          else
            echo "‚ö†Ô∏è External HTTPS access failed (might be nginx issue)"
            if docker ps --filter "name=cinemahint-nginx" --filter "status=running" | grep -q nginx; then
              echo "üìã Nginx container logs:"
              docker logs --tail=20 cinemahint-nginx
            else
              echo "‚ùå Nginx container is not running!"
            fi
          fi
          
          # Show status
          docker-compose ps
          
    - name: Verify deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_SSH_PORT || 22 }}
        script: |
          # Additional health checks
          echo "üîç Running deployment verification..."
          
          # Check if all services are running
          cd /home/${{ secrets.EC2_USERNAME }}/cinema-hint-server
          
          if docker-compose ps | grep -q "Up.*healthy"; then
            echo "‚úÖ All services are healthy"
          else
            echo "‚ö†Ô∏è Some services may not be healthy:"
            docker-compose ps
          fi
          
          # Test API endpoints
          echo "üß™ Testing API endpoints..."
          
          # Health endpoint
          if curl -f https://cinemahint.adilhusain.me/api/health; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
          fi
          
          # Check Redis connection
          if docker exec cinemahint-redis redis-cli ping | grep -q "PONG"; then
            echo "‚úÖ Redis is responding"
          else
            echo "‚ùå Redis connection failed"
          fi
          
          echo "üéâ Deployment verification completed!"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment to https://cinemahint.adilhusain.me was successful!"
        else
          echo "‚ùå Deployment failed. Check the logs above for details."
          exit 1
        fi